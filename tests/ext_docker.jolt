#!/usr/bin/env python

import sys
import time
sys.path.append(".")

from jolt import utils
from os import path
from testsupport import JoltTest


class DockerExt(JoltTest):
    name = "ext/docker"

    requires = ["docker/cli"]

    def test_simple(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            pass

        ---
        """

        b = self.build("busybox")
        a = self.artifacts(b)
        self.assertExists(path.join(a[0], "busybox.tar"))

    def test_dockerfile(self):
        """
        --- file: Testfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            dockerfile = "Testfile"

        ---
        """

        b = self.build("busybox")
        a = self.artifacts(b)
        self.assertExists(path.join(a[0], "busybox.tar"))

    def test_dockerfile_as_source(self):
        """
        --- file: Testfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            dockerfile = \"\"\"
            FROM busybox:latest
            CMD ["busybox"]
            \"\"\"

        ---
        """

        b = self.build("busybox")
        a = self.artifacts(b)
        self.assertExists(path.join(a[0], "busybox.tar"))

    def test_extract(self):
        """
        --- file: Testfile
        FROM busybox:latest
        RUN touch test-file1 test-file2
        RUN rm test-file1

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            dockerfile = "Testfile"
            extract = True
        ---
        """

        b = self.build("busybox")
        a = self.artifacts(b)
        self.assertNotExists(path.join(a[0], "rootfs", "test-file1"))
        self.assertExists(path.join(a[0], "rootfs", "test-file2"))

    def test_imagefile(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            imagefile = "image.tar"

        ---
        """

        b = self.build("busybox")
        a = self.artifacts(b)
        self.assertExists(path.join(a[0], "image.tar"))

    def test_compression(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class BusyboxBz2(DockerImage):
            name = "busybox/bz2"
            compression = "bz2"

        class BusyboxGz(DockerImage):
            name = "busybox/gz"
            compression = "gz"

        class BusyboxXz(DockerImage):
            name = "busybox/xz"
            compression = "xz"

        ---
        """

        b1 = self.build("busybox/bz2")
        b2 = self.build("busybox/gz")
        b3 = self.build("busybox/xz")
        a1 = self.artifacts(b1)
        a2 = self.artifacts(b2)
        a3 = self.artifacts(b3)
        f1 = path.join(a1[0], "busybox_bz2.tar.bz2")
        f2 = path.join(a2[0], "busybox_gz.tar.gz")
        f3 = path.join(a3[0], "busybox_xz.tar.xz")
        self.assertExists(f1)
        self.assertExists(f2)
        self.assertExists(f3)
        self.assertIn("bzip2", self.tools.run("file {}", f1))
        self.assertIn("gzip", self.tools.run("file {}", f2))
        self.assertIn("XZ compressed", self.tools.run("file {}", f3))

    def test_tag(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            tags = ["busybox:jolt", "busybox:latest-jolt"]

        ---
        """

        b = self.build("busybox")
        a = self.artifacts(b)
        f = path.join(a[0], "busybox.tar")
        self.assertExists(f)
        try:
            loaded = self.tools.run("docker image load -i {}", f)
            self.assertIn("busybox:jolt", loaded)
        finally:
            utils.call_and_catch(self.tools.run, "docker image rm busybox:jolt")

    def test_cleanup(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            tags = ["busybox:jolt"]
            cleanup = BooleanParameter()
        ---
        """

        try:
            b = self.build("busybox:cleanup=true")
            self.assertBuild(b, "busybox:cleanup=true")
            self.assertNotIn("busybox:jolt", self.tools.run("docker images"))

            b = self.build("busybox:cleanup=false")
            self.assertBuild(b, "busybox:cleanup=false")
            self.assertNotIn("busybox:jolt", self.tools.run("docker images"))

        finally:
            self.tools.run("docker image rm -f busybox:jolt")

    def test_imagefile(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            tags = ["busybox:jolt"]
            imagefile = Parameter()
        ---
        """
        b = self.build("busybox:imagefile=image.tar")
        a = self.artifacts(b)
        f = path.join(a[0], "image.tar")
        self.assertExists(f)
        f = self.tools.glob(path.join(a[0], "*"))
        self.assertEqual(1, len(f))

        b = self.build("busybox:imagefile=")
        a = self.artifacts(b)
        f = self.tools.glob(path.join(a[0], "*"))
        self.assertEqual(0, len(f))

    def test_autoload_used(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            pass

        class Consumer(Task):
            requires = ["busybox"]

            def run(self, deps, tools):
                images = tools.run("docker image ls --format '{{{{{{{{.Repository}}}}}}}}:{{{{{{{{.Tag}}}}}}}}'")
                assert deps["busybox"].strings.tag in images, "image not properly loaded"
        ---
        """
        self.build("consumer")

    def test_autoload_not_used_when_imagefile_is_none(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            imagefile = None
            tags = ["mybusybox:latest"]

        class Consumer(Task):
            requires = ["busybox"]

            def run(self, deps, tools):
                images = tools.run("docker image ls --format '{{{{{{{{.Repository}}}}}}}}:{{{{{{{{.Tag}}}}}}}}'")
                assert deps["busybox"].strings.tag not in images, "image not properly loaded"
        ---
        """
        self.build("consumer")
        self.assertNotIn("mybusybox:latest", self.tools.run("docker image ls --format '{{{{.Repository}}}}:{{{{.Tag}}}}'"))

    def test_autoload_not_used_when_autoload_is_false(self):
        """
        --- file: Dockerfile
        FROM busybox:latest

        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(DockerImage):
            autoload = False
            tags = ["mybusybox:latest"]

        class Consumer(Task):
            requires = ["busybox"]

            def run(self, deps, tools):
                images = tools.run("docker image ls --format '{{{{{{{{.Repository}}}}}}}}:{{{{{{{{.Tag}}}}}}}}'")
                assert deps["busybox"].strings.tag not in images, "image not properly loaded"
        ---
        """
        self.build("consumer")
        self.assertNotIn("mybusybox:latest", self.tools.run("docker image ls --format '{{{{.Repository}}}}:{{{{.Tag}}}}'"))

    def test_artifact_pull_rmi(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class Busybox(Task):
            def publish(self, a, t):
                a.docker.pull.append("busybox:latest")
                a.docker.rmi.append("busybox:latest")

        class Consumer(Task):
            requires = ["busybox"]

            def run(self, deps, tools):
                images = tools.run("docker image ls --format '{{{{{{{{.Repository}}}}}}}}:{{{{{{{{.Tag}}}}}}}}'")
                assert "busybox:latest" in images, "image not properly loaded"
        ---
        """
        self.build("consumer")
        self.assertNotIn("busybox:latest", self.tools.run("docker image ls --format '{{{{.Repository}}}}:{{{{.Tag}}}}'"))

    def test_container_user(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            user = Parameter("root")

        class ATest(Task):
            requires = "a:user={{user}}"
            user = Parameter("root")

            def run(self, deps, tools):
                self.id = deps[self.requires[0]].info["Id"]
                assert tools.run("docker exec {{id}} whoami") == str(self.user)
        ---
        """
        self.build("atest:user=root atest:user=nobody")

    def test_container_environment(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            arg = Parameter()
            environment = ["PARAM={{arg}}"]

        class ATest(Task):
            requires = "a:arg={{arg}}"
            arg = Parameter()

            def run(self, deps, tools):
                self.id = deps[self.requires[0]].info["Id"]
                assert tools.run("docker exec {{id}} sh -c 'echo $PARAM'") == str(self.arg)
        ---
        """
        self.build("atest:arg=root atest:arg=nobody")

    def test_container_privileged(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            privileged = BooleanParameter()
            user = "root"

        class ATest(Task):
            requires = "a:privileged={{privileged}}"
            privileged = BooleanParameter()

            def run(self, deps, tools):
                self.id = deps[self.requires[0]].info["Id"]
                try:
                    tools.run("docker exec {{id}} ip link add jolt0 type dummy")
                except Exception:
                    assert not self.privileged
                else:
                    assert self.privileged
        ---
        """
        self.build("atest:privileged=true atest:privileged=false")

    def test_container_labels(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            labels = ["jolt.identity={{identity}}"]

        class ATest(Task):
            requires = "a"

            def run(self, deps, tools):
                a = deps[self.requires[0]]
                assert a.info["Config"]["Labels"]["jolt.identity"] == a.task.identity

        ---
        """
        self.build("atest")

    def test_container_chroot(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            chroot = True
            image = "busybox:latest"

        class ATest(Task):
            requires = "a"

            def run(self, deps, tools):
                tools.run("which busybox")
        ---
        """
        try:
            self.tools.run("unshare -rm uname")
        except Exception:
            self.skip("required privileges not held")
        self.build("atest")

    def test_container_entrypoint(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            entrypoint = "cat"

        class ATest(Task):
            requires = "a"

            def run(self, deps, tools):
                self.id = deps[self.requires[0]].info["Id"]
                entry = tools.run("docker exec {{id}} cat /proc/1/cmdline")
                assert "cat" in entry, f"Got '{{entry}}', expected 'cat'"

        ---
        """
        self.build("atest")

    def test_container_caps(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            cap_adds = ["ALL"]
            cap_drops = ["NET_ADMIN"]
            user = "root"

        class ATest(Task):
            requires = "a"

            def run(self, deps, tools):
                assert "ALL" in deps[self.requires[0]].info["HostConfig"]["CapAdd"]
                assert "NET_ADMIN" in deps[self.requires[0]].info["HostConfig"]["CapDrop"]

        ---
        """
        self.build("atest")

    def test_container_volumes(self):
        """
        --- file: a/a.txt
        --- tasks:
        from jolt.plugins.docker import *


        class B(Task):
            def publish(self, artifact, tools):
                with tools.cwd(tools.builddir()):
                    tools.write_file("b.txt", "")
                    artifact.collect("b.txt")


        class A(DockerContainer):
            image = "busybox:latest"
            requires = ["b"]
            volumes = ["{{joltdir}}/a:/a"]


        class ATest(Task):
            requires = "a"

            def run(self, deps, tools):
                self.id = deps[self.requires[0]].info["Id"]
                tools.run("docker exec {{id}} cat {{joltdir}}/a/a.txt")
                tools.run("docker exec {{id}} cat {{}}/b.txt", deps["b"].path)
                tools.run("docker exec {{id}} cat /a/a.txt")

        ---
        """
        self.build("atest")

    def test_container_publish(self):
        """
        --- file: a/a.txt
        --- tasks:
        from jolt.plugins.docker import *


        class Busybox(DockerImage):
            dockerfile = '''
            FROM busybox:latest
            EXPOSE 80
            '''

        class A(DockerContainer):
            image = "busybox"
            ports = True

        class B(DockerContainer):
            image = "busybox"
            ports = ["80"]

        class C(DockerContainer):
            image = "busybox"
            ports = ["8888:80"]

        class ATest(Task):
            requires = ["a", "b", "c"]

            def run(self, deps, tools):
                for req in self.requires:
                    print(deps[req].info["NetworkSettings"]["Ports"]["80/tcp"])

        ---
        """
        self.build("atest")

    def test_stop_timeout(self):
        """
        --- tasks:
        from jolt.plugins.docker import *

        class A(DockerContainer):
            image = "busybox:latest"
            stop_timeout = 3

        class ATest(Task):
            requires = "a"
        ---
        """
        r = self.build("atest")
        self.assertIn("Resource release finished after 03s", r)
