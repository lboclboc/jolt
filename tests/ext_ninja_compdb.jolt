#!/usr/bin/env python

import json
import re
import sys
import time
sys.path.append(".")

from testsupport import JoltTest

from jolt import filesystem as fs


class CompDBExtension(JoltTest):
    name = "ext/ninja-compdb"

    def _recipe(self):
        return "from jolt.plugins.ninja import *\n" + super(CompDBExtension, self)._recipe()

    def test_compdb(self):
        """
        --- config:

        [ninja-compdb]

        --- file: lib.h
        int lib();

        --- file: custom.x
        Hello

        --- file: lib.cpp
        #include "lib.h"
        int lib() {{return 0;}}

        --- file: test/test.cpp
        #include "lib.h"
        int main() {{return lib();}}

        --- tasks:
        class Lib(CXXLibrary):
            headers = ["lib.h"]
            sources = ["lib.cpp", "custom.x"]
            cp = HostVariable({{"nt": "copy", "posix": "cp"}})
            x_rule = Rule(infiles=[".x"], outfiles=["{{outdir}}/{{in_base}}.hpp"], command="$cp $in $out")

            def publish(self, artifact, tools):
                super().publish(artifact, tools)
                with tools.cwd(self.outdir):
                    artifact.collect("custom.hpp")

        class Exe(CXXExecutable):
            requires = "lib"
            sources = ["test/test.cpp"]

        ---
        """
        r = self.build("exe")
        self.assertHasArtifactName(r, "compdb@exe")
        self.assertHasArtifactName(r, "depfiles@exe")
        self.assertHasArtifactName(r, "main@exe")

        with self.tools.cwd(self.ws):
            self.tools.rmtree("build")

        r = self.jolt("compdb exe")
        db = re.findall("Compilation DB: (.*)", r, re.M)
        self.assertTrue(len(db) == 1)

        with open(db[0]) as f:
            commands = json.load(f)

        print(json.dumps(commands, indent=2))

        files = {fs.path.basename(command["file"]): command for command in commands}
        self.assertTrue(len(files) >= 3)
        self.assertIn("custom.x", files)
        self.assertIn("lib.cpp", files)
        self.assertIn("test.cpp", files)

        with self.tools.cwd(files["test.cpp"]["directory"]):
            self.tools.run("mkdir -p {}", fs.path.dirname(files["test.cpp"]["output"]))
            self.tools.run(files["test.cpp"]["command"])

        with self.tools.cwd(self.ws):
            self.tools.append_file("lib.h", "#error")

        with self.tools.cwd(files["test.cpp"]["directory"]):
            with self.assertRaises(Exception, msg="#error"):
                self.tools.run(files["test.cpp"]["command"])

        with self.tools.cwd(self.ws):
            self.assertIn("Hello", self.tools.read_file("build/ninja-lib-inc/custom.hpp"))

        self.jolt("clean exe")
        with self.assertRaises(Exception, msg="must be built"):
            self.jolt("compdb exe")

    def test_compdb_without_depfiles(self):
        """
        --- config:

        [ninja-compdb]
        depfiles = false

        --- file: lib.h
        int lib();

        --- file: custom.x
        Hello

        --- file: lib.cpp
        #include "lib.h"
        int lib() {{return 0;}}

        --- tasks:
        class Lib(CXXLibrary):
            headers = ["lib.h"]
            sources = ["lib.cpp", "custom.x"]
            cp = HostVariable({{"nt": "copy", "posix": "cp"}})
            x_rule = Rule(infiles=[".x"], outfiles=["{{outdir}}/{{in_base}}.hpp"], command="$cp $in $out")

            def publish(self, artifact, tools):
                super().publish(artifact, tools)
                with tools.cwd(self.outdir):
                    artifact.collect("custom.hpp")

        ---
        """
        r = self.build("lib")
        self.assertHasArtifactName(r, "compdb@lib")
        with self.assertRaises(AssertionError):
            self.assertHasArtifactName(r, "depfiles@lib")
        self.assertHasArtifactName(r, "main@lib")
