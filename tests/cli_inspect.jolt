#!/usr/bin/env python3

import re
import sys
import time
sys.path.append(".")

from testsupport import JoltTest


class InspectCli(JoltTest):
    name = "cli/inspect"

    def test_name(self):
        """
        --- tasks:
        class Explicit(Task):
            name = "explicit1"
        ---
        """
        self.jolt("build explicit1")

    def test_inspect_invalid(self):
        """ """
        with self.assertRaises(Exception):
            self.jolt("inspect non-existing-task")

    def test_inspect(self):
        """
        --- tasks:
        class TaskName(Task):
            \"\"\" docstring \"\"\"
            pass
        ---
        """
        output = self.jolt("inspect taskname")
        self.assertIn("taskname", output)
        self.assertIn("docstring", output)
        self.assertIn("Parameters\n    None", output)
        self.assertIn("Requirements\n    None", output)
        self.assertIn("Definition\n    File              test.jolt (6)", output)

    def test_inspect_parameterized(self):
        """
        --- tasks:
        class A(Task):
            arg1 = Parameter(help="docstring")
        ---
        """
        output = self.jolt("inspect a")
        self.assertIn("Parameters\n    arg1", output)
        self.assertIn("docstring", output)

    def test_inspect_requirements_ok(self):
        """
        --- tasks:
        class A(Task):
            pass

        class B(Task):
            requires = ["a"]

        class C(Task):
            def requires(self):
                return ["a"]
        ---
        """
        output = self.jolt("inspect b")
        self.assertIn("Requirements\n    a", output)
        output = self.jolt("inspect c")
        self.assertIn("Requirements\n    a", output)

    def test_inspect_requirements_param(self):
        """
        --- tasks:
        class A(Task):
            arg = Parameter()

        class B(Task):
            arg = Parameter()
            requires = ["a:arg={{arg}}"]

        class C(Task):
            arg = Parameter()
            def requires(self):
                return ["a:arg={{arg}}"]
        ---
        """
        output = self.jolt("inspect b")
        self.assertIn("Requirements\n    Unavailable", output)
        output = self.jolt("inspect c")
        self.assertIn("Requirements\n    Unavailable", output)

        output = self.jolt("inspect b:arg=value")
        self.assertIn("Requirements\n    a:arg=value", output)
        output = self.jolt("inspect c:arg=value")
        self.assertIn("Requirements\n    a:arg=value", output)

    def test_inspect_requirements_exception(self):
        """
        --- tasks:
        class A(Task):
            def requires(self):
                raise "broken"
        ---
        """
        output = self.jolt("inspect a")
        self.assertIn("Parameters\n    None", output)
        self.assertIn("Unavailable", output)

    def test_inspect_identity(self):
        """
        --- tasks:
        class A1(Task):
            pass
        class B1(Test):
            pass
        class C1(Test):
            pass
        class D1(Task):
            pass
        class A2(Test):
            pass
        class B2(Task):
            pass
        class C2(Test):
            pass
        class D2(Task):
            pass

        class E(Task):
            requires = "a1", "b1", "c1", "d1"
        class F(Task):
            requires = "c1", "a2", "d2", "b1"
        class G(Task):
            requires = "a2", "c2", "b2", "d2"
        class H(Task):
            requires = "d2", "b1", "c1", "a2"

        class I(Task):
            requires = "e", "f"
        class J(Task):
            requires = "g", "h"

        @attributes.artifact("persist")
        @attributes.artifact("session", session=True)
        class K(Task):
            requires = "i", "j"

            def publish_persist(self, a, t):
                pass

            def publish_session(self, a, t):
                pass

        ---
        """
        i1 = self.jolt("inspect -a k")
        id1 = re.search("Identity[ ]*([^ ]*)", i1).group(1).strip()
        b1 = self.build("k")
        a1 = self.artifacts(b1)
        print(id1, a1)
        self.assertIn("main@" + id1, a1[0])
        self.assertIn("session@", a1[1])
        self.assertIn("persist@" + id1, a1[2])
        i2 = self.jolt("inspect -a k")
        self.assertIn(id1, i2)
        self.assertIn("Location          "+a1[0], i2)
        self.assertNotIn("session@", i2)
        self.assertIn("Location          "+a1[2], i2)
        self.assertIn("Local             True", i2)
