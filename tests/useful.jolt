from jolt import Task, IntParameter, utils, Resource, log
import time

class Pass(Task):
    pass


class Fail(Task):
    def run(self, deps, tools):
        assert False, "Always fails"


class Unstable(Task):
    unstable = True

    def run(self, deps, tools):
        assert False, "Always fails"


class Sleep(Task):
    t = IntParameter()

    def run(self, deps, tools):
        time.sleep(int(self.t))


class ShellSleep(Task):
    t = IntParameter()

    def run(self, deps, tools):
        tools.run("sleep {t}")


class Interrupt(Task):
    t = IntParameter()

    def run(self, deps, tools):
        with utils.delay_interrupt():
            time.sleep(int(self.t))


class RC1(Resource):
    local = False

    def acquire(self, artifact, deps, tools, owner):
        log.info("Acquiring resource: {}", artifact.path)

    def release(self, artifact, deps, tools, owner):
        log.info("Releasing resource: {}", artifact.path)

class RC2(Resource):
    local = True

    def acquire(self, artifact, deps, tools, owner):
        log.info("Acquiring resource: {}", artifact.path)

    def release(self, artifact, deps, tools, owner):
        log.info("Releasing resource: {}", artifact.path)


class Use1(Task):
    cacheable = False
    requires = ["rc1"]

    def run(self, deps, tools):
        self.info("Using resource: {}", deps["rc1"].path)


class Use2(Task):
    cacheable = False
    requires = ["rc2"]

    def run(self, deps, tools):
        self.info("Using resource: {}", deps["rc2"].path)


class Use3(Task):
    requires = ["rc1", "rc2"]
    local = True

    def run(self, deps, tools):
        self.info("Using resource: {}", deps["rc1"].path)
        self.info("Using resource: {}", deps["rc2"].path)



class A(Task):
    local = True

    def unpack(self, artifact, tools):
        pass


class R(Resource):
    local = True
    requires = ["a"]

    def acquire(self, artifact, deps, tools, owner):
        log.info("Acquiring resource: {}", artifact.path)

    def release(self, artifact, deps, tools, owner):
        log.info("Releasing resource: {}", artifact.path)

class B(Task):
    requires = ["r"]
