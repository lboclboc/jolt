// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: cache.proto

package cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CacheService_HasObject_FullMethodName   = "/fstree.CacheService/HasObject"
	CacheService_ReadObject_FullMethodName  = "/fstree.CacheService/ReadObject"
	CacheService_WriteObject_FullMethodName = "/fstree.CacheService/WriteObject"
)

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	// GetBlobPresence returns a list of blobs that are either missing or present in the cache.
	HasObject(ctx context.Context, in *HasObjectRequest, opts ...grpc.CallOption) (*HasObjectResponse, error)
	// Read a blob from the cache
	ReadObject(ctx context.Context, in *ReadObjectRequest, opts ...grpc.CallOption) (CacheService_ReadObjectClient, error)
	// Write a blob to the cache
	WriteObject(ctx context.Context, opts ...grpc.CallOption) (CacheService_WriteObjectClient, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) HasObject(ctx context.Context, in *HasObjectRequest, opts ...grpc.CallOption) (*HasObjectResponse, error) {
	out := new(HasObjectResponse)
	err := c.cc.Invoke(ctx, CacheService_HasObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) ReadObject(ctx context.Context, in *ReadObjectRequest, opts ...grpc.CallOption) (CacheService_ReadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &CacheService_ServiceDesc.Streams[0], CacheService_ReadObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheServiceReadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CacheService_ReadObjectClient interface {
	Recv() (*ReadObjectResponse, error)
	grpc.ClientStream
}

type cacheServiceReadObjectClient struct {
	grpc.ClientStream
}

func (x *cacheServiceReadObjectClient) Recv() (*ReadObjectResponse, error) {
	m := new(ReadObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheServiceClient) WriteObject(ctx context.Context, opts ...grpc.CallOption) (CacheService_WriteObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &CacheService_ServiceDesc.Streams[1], CacheService_WriteObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheServiceWriteObjectClient{stream}
	return x, nil
}

type CacheService_WriteObjectClient interface {
	Send(*WriteObjectRequest) error
	CloseAndRecv() (*WriteObjectResponse, error)
	grpc.ClientStream
}

type cacheServiceWriteObjectClient struct {
	grpc.ClientStream
}

func (x *cacheServiceWriteObjectClient) Send(m *WriteObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheServiceWriteObjectClient) CloseAndRecv() (*WriteObjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	// GetBlobPresence returns a list of blobs that are either missing or present in the cache.
	HasObject(context.Context, *HasObjectRequest) (*HasObjectResponse, error)
	// Read a blob from the cache
	ReadObject(*ReadObjectRequest, CacheService_ReadObjectServer) error
	// Write a blob to the cache
	WriteObject(CacheService_WriteObjectServer) error
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) HasObject(context.Context, *HasObjectRequest) (*HasObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasObject not implemented")
}
func (UnimplementedCacheServiceServer) ReadObject(*ReadObjectRequest, CacheService_ReadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (UnimplementedCacheServiceServer) WriteObject(CacheService_WriteObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteObject not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_HasObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).HasObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_HasObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).HasObject(ctx, req.(*HasObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_ReadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServiceServer).ReadObject(m, &cacheServiceReadObjectServer{stream})
}

type CacheService_ReadObjectServer interface {
	Send(*ReadObjectResponse) error
	grpc.ServerStream
}

type cacheServiceReadObjectServer struct {
	grpc.ServerStream
}

func (x *cacheServiceReadObjectServer) Send(m *ReadObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CacheService_WriteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServiceServer).WriteObject(&cacheServiceWriteObjectServer{stream})
}

type CacheService_WriteObjectServer interface {
	SendAndClose(*WriteObjectResponse) error
	Recv() (*WriteObjectRequest, error)
	grpc.ServerStream
}

type cacheServiceWriteObjectServer struct {
	grpc.ServerStream
}

func (x *cacheServiceWriteObjectServer) SendAndClose(m *WriteObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheServiceWriteObjectServer) Recv() (*WriteObjectRequest, error) {
	m := new(WriteObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fstree.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasObject",
			Handler:    _CacheService_HasObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadObject",
			Handler:       _CacheService_ReadObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteObject",
			Handler:       _CacheService_WriteObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cache.proto",
}
